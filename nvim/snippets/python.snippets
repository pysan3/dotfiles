# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet insplit "split_inputs: splits input by spaces and converts to list"
[${1:int}(i) for i in input().split()]
endsnippet

snippet fori "for loop in range: for i in range"
for ${1:i} in range(${2:n}):$0
endsnippet

snippet _column "Column: _column"
${1} = Column('${1}', ${0})
endsnippet

snippet _columnid "ColumnID: id with autoincrement"
id = Column('id', Integer, primary_key=True, autoincrement=True)
endsnippet

snippet _increment "counter_increase: snipet for incrementing counter"
counter += 1
endsnippet

snippet flush "flush: print without new line but flush"
print(${0}, end='', flush=True)
endsnippet

snippet apiroute "@api.route: snippet for @api.route()"
@api.route('/api/${1:route_name}')
async def ${1}(req, resp):
	$0
endsnippet

snippet newsession "make session: SessionContext"
with SessionContext(session=${1:session}) as session:
	$0
endsnippet

snippet nopylint "disable pylint for current line"
# pylint: disable-all
endsnippet

snippet notyping "disable pyright type-check for current line"
# typing: ignore
endsnippet
