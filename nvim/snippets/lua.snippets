snippet snipinit "require all necessary variables for LuaSnip"
	---@diagnostic disable
	-- stylua: ignore start
	local ls = require("luasnip")
	local s = ls.snippet
	local sn = ls.snippet_node
	local isn = ls.indent_snippet_node
	local t = ls.text_node
	local i = ls.insert_node
	local f = ls.function_node
	local c = ls.choice_node
	local d = ls.dynamic_node
	local r = ls.restore_node
	local events = require("luasnip.util.events")
	local ai = require("luasnip.nodes.absolute_indexer")
	local fmt = require("luasnip.extras.fmt").fmt
	local rep = require("luasnip.extras").rep
	local m = require("luasnip.extras").m
	local lambda = require("luasnip.extras").l
	local postfix = require("luasnip.extras.postfix").postfix

	local snippets, autosnippets = {}, {}
	local e = function(trig, name, dscr, wordTrig, regTrig, docstring, docTrig, hidden, priority)
	  local ret = { trig = trig, name = name, dscr = dscr }
	  if wordTrig ~= nil then ret["wordTrig"] = wordTrig end
	  if regTrig ~= nil then ret["regTrig"] = regTrig end
	  if docstring ~= nil then ret["docstring"] = docstring end
	  if docTrig ~= nil then ret["docTrig"] = docTrig end
	  if hidden ~= nil then ret["hidden"] = hidden end
	  if priority ~= nil then ret["priority"] = priority end
	  return ret
	end
	-- stylua: ignore end
	---@diagnostic enable

	$0

	return snippets, autosnippets
snippet nodi "disable diagnostic for current line"
	---@diagnostic disable-line
snippet f "function with no name"
	function ($1)
	  $0
	end$2
snippet fs "string.format"
	string.format([[$0]])
snippet vi "vim.inspect"
	vim.inspect($0)
