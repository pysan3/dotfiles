#!/usr/bin/env zsh

set -e

[ -d "$DOTFILES" ] && source "$DOTFILES/functions.zsh"
checkdependency 'getoptions'

VERSION="0.1"

parser_definition () {
  setup REST help:usage -- "Usage: ${2##./} <input file> [<output filetype>]" ''
  msg -- 'Arguments:'
  msg label:'input file' -- 'Path to input file.'
  msg label:'output filetype' -- 'Output filetype. Passed to pandoc with option `-t`.' 'Default: gfm'
  msg -- 'Options:'
  disp :usage -h --help
  disp VERSION -V --version
}

eval "$(getoptions parser_definition - "$0") exit 1"

checkdependency 'pandoc'

pandoc_dir="$HOME/Git/norg-pandoc"
if [ ! -d "$pandoc_dir" ]; then
  git clone git@github.com:boltlessengineer/norg-pandoc.git "$pandoc_dir"
fi

IN_FILE="$(realpath "$1")"
shift
[[ x"${IN_FILE:e}" = x'norg' ]] || err_exit "Extension of $IN_FILE must be '.norg'"

OUT_FT="${1:-gfm}"
[ $# -lt 1 ] || shift
OUT_SUFFIX="$OUT_FT"

if [[ x"$OUT_SUFFIX" = x'markdown' ]]; then
  OUT_SUFFIX='md'
elif [[ x"$OUT_SUFFIX" = x'gfm' ]]; then
  OUT_SUFFIX='md'
fi

info "Converting $IN_FILE to $OUT_FT"

OUT_FILE="${IN_FILE:r}.${OUT_SUFFIX}"

info "Output to $OUT_FILE"

cd "$pandoc_dir"
pandoc -f ./init.lua -t "$OUT_FT" "$IN_FILE" -o "$OUT_FILE" --wrap=none $@ \
  && echo "$OUT_FILE"

if [[ x"$OUT_SUFFIX" = x'md' ]]; then
  sed -i 's/\\!\[/![/g' "$OUT_FILE"
  cat "$OUT_FILE" | python "$DOTFILES/static/remove_empty_lines_in_lists.py" | sponge "$OUT_FILE"
  linr=$(grep -n '^```$' "$OUT_FILE" | head -1 | cut -d ':' -f 1)
  if [ -n "$linr" ]; then
    sed -i 1,"$((linr+1))"d "$OUT_FILE"
  fi
fi

cd -
