local dap = require("dap")

-- require('dap').set_log_level('INFO')
dap.defaults.fallback.terminal_win_cmd = "20split new"
vim.fn.sign_define("DapBreakpoint", { text = "🟥", texthl = "", linehl = "", numhl = "" })
vim.fn.sign_define("DapBreakpointRejected", { text = "🟦", texthl = "", linehl = "", numhl = "" })
vim.fn.sign_define("DapStopped", { text = "⭐️", texthl = "", linehl = "", numhl = "" })

vim.keymap.set("n", "<leader>dh", function()
  dap.toggle_breakpoint()
end)
vim.keymap.set("n", "<leader>dH", function()
  dap.set_breakpoint(vim.fn.input("Breakpoint condition: "))
end)
-- vim.keymap.set("n", "<A-k>", function()
--   dap.step_out()
-- end)
-- vim.keymap.set("n", "<A-l>", function()
--   dap.step_into()
-- end)
-- vim.keymap.set("n", "<A-j>", function()
--   dap.step_over()
-- end)
-- vim.keymap.set("n", "<A-h>", function()
--   dap.continue()
-- end)
vim.keymap.set("n", "<leader>dn", function()
  dap.run_to_cursor()
end)
vim.keymap.set("n", "<leader>dc", function()
  dap.terminate()
end)
vim.keymap.set("n", "<leader>dR", function()
  dap.clear_breakpoints()
end)
vim.keymap.set("n", "<leader>de", function()
  dap.set_exception_breakpoints({ "all" })
end)
-- vim.keymap.set("n", "<leader>da", function()
--   require("debugHelper").attach()
-- end)
-- vim.keymap.set("n", "<leader>dA", function()
--   require("debugHelper").attachToRemote()
-- end)
vim.keymap.set("n", "<leader>di", function()
  require("dap.ui.widgets").hover()
end)
vim.keymap.set("n", "<leader>d?", function()
  local widgets = require("dap.ui.widgets")
  widgets.centered_float(widgets.scopes)
end)
vim.keymap.set("n", "<leader>dk", ':lua require"dap".up()<CR>zz')
vim.keymap.set("n", "<leader>dj", ':lua require"dap".down()<CR>zz')
vim.keymap.set("n", "<leader>dr", ':lua require"dap".repl.toggle({}, "vsplit")<CR><C-w>l')
vim.keymap.set("n", "<leader>dk", function()
  dap.up()
end)
vim.keymap.set("n", "<leader>dj", function()
  dap.down()
end)
vim.keymap.set("n", "<leader>dr", function()
  dap.repl.toggle({}, "vsplit")
end)
